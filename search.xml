<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css世界的层叠规则</title>
    <url>/2019/12/05/css-stack-index/</url>
    <content><![CDATA[<p>身为一个前端er，css一直是我们最为基本的技能，而css的中文翻译就是层叠样式表。那为什么css世界的规则是基于‘层叠上下文’？我们又该怎么理解元素的层叠顺序？对于z-index的负值又该怎么理解？接下来，我们就基于一张图来好好谈谈css的层叠规则。<br>废话不对说，先祭出图👇👇👇👇👇👇👇<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/index.png" alt="图一"></p>
<a id="more"></a>
<h2 id="理解css的层叠上下文和层叠水平"><a href="#理解css的层叠上下文和层叠水平" class="headerlink" title="理解css的层叠上下文和层叠水平"></a>理解css的层叠上下文和层叠水平</h2><hr>
<p>很多人对于css的层叠，第一反应想到的就是z-index属性。在实际项目中，往往我们都是通过对定位元素（position不为static）设置z-index来实现我们想要的层叠关系。但是，随着css3的发展，现在z-index已经并非只有对定位元素才有效，flex盒子的子元素也可以设置z-index属性。而且网页中的绝大部分元素是非定位元素，影响层叠顺序的属性远不止z-index，我只能说，css没你想的那么简单哦😯</p>
<h3 id="理解元素的层叠顺序"><a href="#理解元素的层叠顺序" class="headerlink" title="理解元素的层叠顺序"></a>理解元素的层叠顺序</h3><p>这里我们首先对开始祭出的图来做个补充说明</p>
<ul>
<li>位于最下面的background/border特指层叠上下文元素的边框和背景色。每一个层叠顺序规则仅适用于当前层叠上下文元素的小世界</li>
<li>内联元素的层叠顺序要高于浮动和块级元素。一般来说，像底层的background/border是装饰属性，浮动元素和块级元素用作布局，而内联元素都是内容。所以，记住喽😊，<strong>网页中最重要的就是内容</strong></li>
</ul>
<h3 id="层叠黄金准则"><a href="#层叠黄金准则" class="headerlink" title="层叠黄金准则"></a>层叠黄金准则</h3><p>一般来说，当元素发生层叠的时候，其覆盖关系遵循下面两条准则：<br>（1）谁大谁在上：在同一层叠上下文领域，层叠水平大的覆盖小的那个（z-index大的在上面）<br>（2）后来居上：元素的层叠水平一致，层叠顺序相同的时候，DOM流中处于后面的元素会覆盖前面的元素</p>
<h2 id="深入了解层叠上下文"><a href="#深入了解层叠上下文" class="headerlink" title="深入了解层叠上下文"></a>深入了解层叠上下文</h2><hr>
<h3 id="层叠上下文的创建"><a href="#层叠上下文的创建" class="headerlink" title="层叠上下文的创建"></a>层叠上下文的创建</h3><p>层叠上下的创建概括来说可以有一下三种方式：</p>
<ul>
<li>页面根元素天生具有层叠上下文，称为根层叠上下文</li>
<li>z-index值为数值的定位元素的传统“层叠上下文”，这个也是我们最熟悉的一种啦</li>
<li>由css3属性引起的</li>
</ul>
<h4 id="定位元素与传统层叠上下文"><a href="#定位元素与传统层叠上下文" class="headerlink" title="定位元素与传统层叠上下文"></a>定位元素与传统层叠上下文</h4><p>对于position值为relative/absolute/fixe的，当其z-index值不是auto的时候，会创建层叠上下文。<br>先来看一下第一个例子：<br>HTML代码如下👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style=&apos;position:relative;z-index:auto;&apos;&gt;</span><br><span class="line">&lt;!-- 树 --&gt;</span><br><span class="line">&lt;img src=&apos;tree.jpeg&apos; style=&apos;position:absolute;z-index:2;&apos;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&apos;position:relative;z-index:auto;&apos;&gt;</span><br><span class="line">&lt;!-- 马--&gt;</span><br><span class="line">&lt;img src=&apos;ma.jpg&apos; width=&apos;100&apos; style=&apos;position:absolute;z-index:1;&apos;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>结果如下图所示，效果符合预期。<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/layer2.png" alt=""><br>现在对父级简单调整一下，把z-index：auto改成层叠水平一样高的z-index：0，代码如下👇</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style=&apos;position:relative;z-index:0;&apos;&gt;</span><br><span class="line">&lt;!-- 树 --&gt;</span><br><span class="line">&lt;img src=&apos;tree.jpg&apos; style=&apos;position:absolute;z-index:2;&apos;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&apos;position:relative;z-index:0;&apos;&gt;</span><br><span class="line">&lt;!-- 马--&gt;</span><br><span class="line">&lt;img src=&apos;ma.jpg&apos; style=&apos;position:absolute;z-index:1;&apos;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>结果如下图所示，覆盖关系反了过来(🐂👃)！！！<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/layer1.png" alt=""><br>为什么小小的改动，竟然会有这么大的差异呢？关键就在于z-indx：auto所在的div元素是一个<strong>普通定位元素</strong>，于是，里面的img的层叠比较不受父级影响，两者直接套用层叠准则，<strong>z-index大的在上面</strong>。<br>而当z-index变为数值，哪怕是0，也会立刻创造一个层叠上下文，所以此时img元素的层叠顺序比较就变成优先比较父级的顺序。由于两个父级z-index都是0，此时根据DOM文档流后面的元素覆盖前面的这个原则，就出现了上图的结果。<br>没想到简单的一个z-index属性，也能搞出这么多的花样，css世界水果然很深🏊‍♀️🏊‍♀️🏊‍♀️</p>
<h4 id="css3与新时代的层叠上下文"><a href="#css3与新时代的层叠上下文" class="headerlink" title="css3与新时代的层叠上下文"></a>css3与新时代的层叠上下文</h4><p>当出现以下css3属性的时候，也会形成层叠上下文哦：<br>1、 元素为flex布局，同时z-index值不是auto<br>2、 元素的opacity值不是1<br>3、 元素的transform值不是none<br>4、 元素的filetr属性不是none<br>5、 元素mix-blend-mode值不是normal<br>6、 元素的isolation值不是isolate<br>7、 元素的will-change属性值为上面2-6的任意一个<br>8、 <strong>元素的-webkit-overflow-scrolling设为touch</strong>(当初做移动端项目就在这点上被坑到了😭)</p>
<h2 id="z-index负值深入理解"><a href="#z-index负值深入理解" class="headerlink" title="z-index负值深入理解"></a>z-index负值深入理解</h2><hr>
<p>是不是第一次知道z-index竟然可以支持负值？（反正我不是🤷‍♀️）z-index的具体规则又是怎么样的呢？<br>一般来说，z-index负值元素的层级是在层叠上下文上面、block元素的下面，也就是z-index虽然名为负数层级，但依然无法突破当前层叠上下文所控制的区域。<br>先看一个例子加深一下认识👇：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;h4&gt;.box非层叠上下文元素&lt;/h4&gt;</span><br><span class="line">&lt;div class=&apos;box&apos;&gt;</span><br><span class="line">  &lt;img src=&apos;1.jpg&apos;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h4&gt;.box是层叠上下文元素&lt;/h4&gt;</span><br><span class="line">&lt;div class=&apos;box content&apos;&gt;</span><br><span class="line">  &lt;img src=&apos;1.jpg&apos;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- CSS --&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.box &gt; img &#123; </span><br><span class="line">  position: relative; </span><br><span class="line">  z-index: -1; </span><br><span class="line">  right: -50px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.context &#123;</span><br><span class="line">  transform: scale(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现的效果👇👇👇👇<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/layer3.png" alt=""><br>那么z-index负值在实际项目中又有上面用呢？具体作用如下：</p>
<ul>
<li><strong>可访问属性隐藏。</strong> z-index负值可以隐藏元素，只需要层叠上下文内的某一个父元素加个背景色就可以</li>
<li><strong>定位在元素的后面。</strong> 我们可以先看一个模拟纸张效果的例子👇</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div class=&apos;page&apos;&gt;</span><br><span class="line">    &lt;h4 class=&apos;title&apos;&gt;一些示例文字&lt;/h4&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- Style --&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  background: #666;</span><br><span class="line">  position: relative;</span><br><span class="line">  z-index: 0;</span><br><span class="line">&#125;</span><br><span class="line">.page &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    background-color: #f4f39e;</span><br><span class="line">    background: linear-gradient(to bottom, #f4f39e, #f5da41 60%, #fe6);</span><br><span class="line">    box-shadow: 0 2px 10px 1px rgba(0, 0, 0, .2);</span><br><span class="line">    text-shadow: 0 1px 0 #f6ef97;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.page:before &#123;</span><br><span class="line">    transform: skew(-15deg) rotate(-5deg);</span><br><span class="line">    transform-origin: left bottom;</span><br><span class="line">    left: 0;</span><br><span class="line">&#125;</span><br><span class="line">.page:after &#123;</span><br><span class="line">    transform: skew(15deg) rotate(5deg);</span><br><span class="line">    transform-origin: right bottom;</span><br><span class="line">    right: 0;</span><br><span class="line">&#125;</span><br><span class="line">/* 边角卷边阴影 */</span><br><span class="line">.page:before, .page:after &#123;</span><br><span class="line">    width: 90%; height: 20%;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    box-shadow: 0 8px 16px rgba(0, 0, 0, .3);</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    z-index: -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现效果</strong>👇</p>
<p><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/layer4.png" alt=""></p>
<blockquote>
<p><strong>解释一下</strong>：<br>.container灰色背景通过position:relative;z-index:0创建了层叠上下文，.page仅有position:relative而没有设置z-index,因此只能算z-index:auto程度的定位元素，于是，z-index：-1两个边角阴影就完美地藏在了层叠上下文（灰色背景）之上，普通定位元素（黄色纸张）之下，隐藏了丑陋的细节，展示了完美的边角阴影，实现了最终细腻的样式效果🎉🎉🎉</p>
</blockquote>
<h2 id="z-index“不犯二”准则"><a href="#z-index“不犯二”准则" class="headerlink" title="z-index“不犯二”准则"></a>z-index“不犯二”准则</h2><hr>
<p>其准则内容如下：对于非浮动元素，避免设置z-index值，z-index值没有任何理由要超过2（瞬间想到项目里面z-index：9999😷😷😷）。至于原因，有以下几条：</p>
<ul>
<li>定位元素一旦设置了z-index，就从普通元素变成了层叠上下文，相互间的层叠顺序就发生了根本的变化，很容易出现设置了巨大的z-index值也无法覆盖其他元素的问题。</li>
<li>避免z-index‘一山比一山高’的样式混乱问题。想想自己在项目开发过程中，有没有出现过这种情况：a同事对一个元素设置了z-index：99，结果这个值比b同事设置的弹框的z-index还要高，于是b把弹框的z-index设置为了9999，然后可怕的是如果弹框上面还要有出错提示效果….显然，最后项目的z-index层级管理就是一团糟。</li>
</ul>
]]></content>
      <tags>
        <tag>Css3</tag>
      </tags>
  </entry>
  <entry>
    <title>猜数字</title>
    <url>/2019/11/26/leecode02/</url>
    <content><![CDATA[<blockquote>
<p>题目描述</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。</strong></p>
<blockquote>
<p>示例1</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：guess = [1,2,3], answer = [1,2,3]</span><br><span class="line">输出：3</span><br><span class="line">解释：小A 每次都猜对了。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>示例2</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：guess = [2,2,3], answer = [3,2,1]</span><br><span class="line">输出：1</span><br><span class="line">解释：小A 只猜对了第二次。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>限制</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">guess的长度 = 3</span><br><span class="line">answer的长度 = 3</span><br><span class="line">guess的元素取值为 &#123;1, 2, 3&#125; 之一。</span><br><span class="line">answer的元素取值为 &#123;1, 2, 3&#125; 之一。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小白的解题思路：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只要for循环就可以实现了</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; guess</span><br><span class="line"> * @param &#123;number[]&#125; answer</span><br><span class="line"> * @return &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">var game = function(guess = [], answer = []) &#123;</span><br><span class="line">  return guess.reduce((count, item, index) =&gt; &#123;</span><br><span class="line">    if (item === answer[index]) count++</span><br><span class="line">    return count</span><br><span class="line">  &#125;, 0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeeCode系列</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图片居中神器：object-fit</title>
    <url>/2019/11/22/css3-object-fit/</url>
    <content><![CDATA[<p>最近小白在看<a href="https://youzan.github.io/vant" target="_blank" rel="noopener">Vant</a>的文档，它里面有个Image图片组件，可以实现多种填充模式（类似于background），于是一时好奇，查看了源码，结果发现vant是使用了一个Object-fit的属性❓❓❓一脸蒙蔽之后，立马google终于知道了Object-fit是个啥东东。</p>
<a id="more"></a>]]></content>
      <categories>
        <category>Css3</category>
      </categories>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2019/11/20/leecode01/</url>
    <content><![CDATA[<p>作为一名软件工程专业毕业的程序媛，想当年也是半夜刷ACM刷到嗨的人。好几年没写过算法题，感觉脑子都快更不上啦！所以决定开一个LeeCode刷刷刷系列，来个每周一题，大家一起来开刷啊！！</p>
<a id="more"></a>
<blockquote>
<p>题目描述: 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br><strong>示例</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
<p><strong>小白的解题思路：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最简单粗暴的方法肯定是两次for循环，但是这样时间复杂度就是$O(n^2),对于追求性能的前端er来说，这怎么行呢！！</span><br><span class="line">进一步优化，可以通过一个map来存储其中的一个值，然后只需要一次循环去匹配剩下的值就可以l</span><br></pre></td></tr></table></figure>
<p><strong>解题代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum = function(nums, target) &#123;</span><br><span class="line">  const map = new Object()</span><br><span class="line">  for (var i=0; i&lt; nums.length; i++) &#123;</span><br><span class="line">    const number = target - nums[i]</span><br><span class="line">    if(number in map) &#123;</span><br><span class="line">      return [map[number], i]</span><br><span class="line">    &#125;</span><br><span class="line">    map[nums[i]] = i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行用时 : 72 ms</span><br><span class="line">内存消耗 : 34.3 MB</span><br></pre></td></tr></table></figure>
<p><strong>leecode大牛最佳方案</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum = function(nums, target, i = 0, maps = &#123;&#125;) &#123;</span><br><span class="line">  const map = maps</span><br><span class="line">  if(map[target - nums[i] ] &gt;= 0 ) &#123;</span><br><span class="line">      return [ map[target - nums[i] ], i]</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    map[ nums[i] ] = i;</span><br><span class="line">    i++;</span><br><span class="line">    if(i &lt; nums.length - 1)&#123;</span><br><span class="line">      return twoSum(nums, target, i, map)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">      throw &apos;error: twoSum is not find&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeeCode系列</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始基于Hexo+Github搭建个人博客</title>
    <url>/2019/11/20/blog1/</url>
    <content><![CDATA[<p>身为一名程序媛，平时遇到问题就会各种google大法，然后从别人的博客里面寻找答案，小白心里一直希望可以拥有一个属于自己博客，所有这次也是断断续续的花了一天两的时间，折腾出了人生第一个博客🎉🎉🎉🎉🎉，期间也是踩了大大小小的坑😭。话不多说，接下来，小白老师手把手教你怎么搭建一个炫酷（装逼）的博客！</p>
<a id="more"></a>
<hr>
<h3 id="Step1-安装Hexo"><a href="#Step1-安装Hexo" class="headerlink" title="Step1 安装Hexo"></a>Step1 安装Hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Step2-GitHub创建个人博客仓库"><a href="#Step2-GitHub创建个人博客仓库" class="headerlink" title="Step2 GitHub创建个人博客仓库"></a>Step2 GitHub创建个人博客仓库</h3><ul>
<li>登陆GitHub，如果没有账号的话，就点<a href="https://github.com/" target="_blank" rel="noopener">这里</a>注册git账号，然后点击右上角+，选择New repository</li>
<li>填写仓库名，<strong>注意：</strong>这里仓库名必须是<strong>你的github账号.github.io</strong>这种格式，举个例子，看下图小白的配置👇<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120165241.png" alt="s"></li>
<li><a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">配置SSH Key</a>, 已经配过的可以忽略跳过</li>
</ul>
<hr>
<h3 id="Step3-初始化Blog项目"><a href="#Step3-初始化Blog项目" class="headerlink" title="Step3 初始化Blog项目"></a>Step3 初始化Blog项目</h3><ul>
<li>本地选择一个文件夹，用来存放blog项目，然后依次运行下面的脚本👇👇👇<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li>
<li>确保git部署<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>生成文章页面，打开本地浏览<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>tips: 以后每次文章更新之后，都需要执行hexo g重新生成页面</strong></p>
<p>接下来，浏览器输入：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000 </a>, 就可以看到你的博客啦🎉🎉🎉～</p>
<p><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120171641.png" alt="s"><br>是不是觉得很丑，一点也不能让你装逼让你飞，别急<br>接下来我们一步步来完善博客的功能</p>
<hr>
<h4 id="变更主题"><a href="#变更主题" class="headerlink" title="变更主题"></a>变更主题</h4><p><a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">Hexo</a>身为一个热门的博客框架，自然少不了一堆好看的主题。作为一个颜控，就算是博客，也需要高颜值。你可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题库</a>里面选择一个自己中意的样式下载安装，这里小白选择的是<a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank" rel="noopener">Ocean</a>（太好看啦，为数学家疯狂打☎️☎️☎️☎️☎️）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span><br></pre></td></tr></table></figure>
<p>然后打开站点的_config.yml(博客配置文档), 将<strong>theme</strong>设置为<strong>ocean</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>清除缓存，重新构建之后，你的博客样式就变啦，瞬间屌丝逆袭有木有🎉🎉🎉🎉🎉🎉</p>
<p><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120173120.png" alt="d"></p>
<h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h4><p>ocean默认是关闭评论功能的，我们需要以下步骤来实现该功能</p>
<ul>
<li>github 申请oauth apps<br>个人中心点击settings/Developer settings<br><img src="https://github.com/zhwangart/gitalk/raw/master/source/Register-OAuth-application.png" alt="s"><br>说明：<ul>
<li>Application name: 没有限制的 APP 名称，比如：Hexo-application</li>
<li>Homepage URL: 网站的主页，我理解就是根目录，比如 <a href="https://wq931030.github.io">https://wq931030.github.io</a></li>
<li>Application description: 描述，非必填</li>
<li>Authorization callback URL: 回调 url 我理解就是网站的域名，比如 <a href="https://wq931030.github.io">https://wq931030.github.io</a><br>申请成功之后，就看到有了 Client ID 与 Client Secret 的一个页面，页面下边就是申请刚填写的的信息，均可以再次编辑！ 只有 Client ID 与 Client Secret 是在配置 Hexo 的时候需要用。<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120193757.png" alt="s"></li>
</ul>
</li>
<li>修改主题下的_config.yml文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true # true</span><br><span class="line">  clientID: # GitHub Application Client ID</span><br><span class="line">  clientSecret: # Client Secret</span><br><span class="line">  repo: wq931030.github.io # Repository name</span><br><span class="line">  owner: wq931030 # GitHub ID</span><br><span class="line">  admin: wq931030 # GitHub ID</span><br></pre></td></tr></table></figure>
接下来就可以愉快的对博文发表评论啦🎉🎉🎉🎉🎉🎉</li>
</ul>
<hr>
<h3 id="Step4-Blog关联GitHub"><a href="#Step4-Blog关联GitHub" class="headerlink" title="Step4 Blog关联GitHub"></a>Step4 Blog关联GitHub</h3><p>现在，你的博客可以在本地浏览了，接下来我们就来让它可以通过github的线上地址进行访问<br>还是打开站点的_config.yml，修改以下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:wq931030/wq931030.github.io.git #这里就是step2创建的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>然后安装git部署依赖,这样就可以把代码部署到github上去啦～</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>接下来执行以下脚本,  完成部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d #部署</span><br></pre></td></tr></table></figure>
<p>铛铛铛铛，接下来，就可以用<a href="http://wq931030.github.io">http://wq931030.goithub.io</a>来访问博客啦<br>是不是很激动，很幸福，<br><strong>但是</strong><br>身为一个有追求的人，当然想让博客能有自己的域名<br>那么就接着折腾吧</p>
<hr>
<h3 id="Step4-配置阿里云域名"><a href="#Step4-配置阿里云域名" class="headerlink" title="Step4 配置阿里云域名"></a>Step4 配置阿里云域名</h3><p>这里小白选用的是<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里云</a>的域名，小伙伴们可以根据自己的情况来定哦</p>
<ul>
<li>注册完自己的域名之后，接下来需要设置域名解析<br>1、 登录<a href="https://dns.console.aliyun.com/?spm=a2c4g.11186623.2.12.d00459cbLH4MmF#/dns/domainList" target="_blank" rel="noopener">云解析DNS控制台</a><br>2、 添加域名<br>3、 在域名解析页面，点击域名，进入解析设置页面<br>4、 在项目里，ping你自己的yourname.github.io获取到ip地址：<br>  <img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120185908.png" alt="s"><br>5、 添加两条记录<br>  <img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120185030.png" alt="s"></li>
<li>本地blog项目新建一个CNAME文件（没有任何后缀）,然后在里面写上你的个人域名</li>
<li>GitHub项目添加域名<br>进入项目仓库，点击settings，往下拉，在Custom domain这一部分填上你的域名<br><img src="https://raw.githubusercontent.com/wq931030/albums/master/2019/20191120185625.png" alt="s"></li>
</ul>
<p>接下来，等待一段时间<br>然后<br>你就可以用域名打开你的博客啦🎉🎉🎉🎉🎉🎉～～～～～</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
